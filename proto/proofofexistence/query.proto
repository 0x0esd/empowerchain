syntax = "proto3";
package empowerchain.empowerchain.proofofexistence;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "proofofexistence/params.proto";
import "proofofexistence/stored_proof.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/empowerchain/empowerchain/x/proofofexistence/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/empowerchain/empowerchain/proofofexistence/params";
  }
  // Queries a StoredProof by hash.
	rpc StoredProof(QueryGetStoredProofRequest) returns (QueryGetStoredProofResponse) {
		option (google.api.http).get = "/empowerchain/empowerchain/proofofexistence/stored_proof/{hash}";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetStoredProofRequest {
	  string hash = 1;

}

message QueryGetStoredProofResponse {
	StoredProof storedProof = 1 [(gogoproto.nullable) = false];
}

message QueryAllStoredProofRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllStoredProofResponse {
	repeated StoredProof storedProof = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
