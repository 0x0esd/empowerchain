syntax = "proto3";
package empowerchain.plasticcredit;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "empowerchain/plasticcredit/types.proto";

option go_package = "github.com/empowerchain/empowerchain/x/plasticcredit";

service Msg {
  // UpdateParams defines a governance operation for updating the x/plasticcredit module parameters.
  // The authority is defined in the keeper.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);

  // CreateIssuer creates a new Issuer that can create credit classes and issue new credits with those classes
  // There is only a single signer in the system that is allowed to create new issuers and it is defined in Params as "issuer_creator"
  rpc CreateIssuer(MsgCreateIssuer) returns (MsgCreateIssuerResponse);
}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";

  // authority is the address of the governance account.
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  // params defines the x/plasitccredit parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

message MsgCreateIssuer {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string name = 2;
  string description = 3;
  string admin = 4 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

message MsgCreateIssuerResponse {
  uint64 issuer_id = 1;
}

message MsgIssueCredits {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  uint64 project_id = 2;
  string denom_suffix = 3;
  CreditAmount credit_amount = 4;
  repeated ProvenData credit_data = 5;
}

message MsgIssueCreditsResponse {
  string denom = 1;
  CreditAmount total_amount = 2;
}

message MsgTransferCredits {
  option (cosmos.msg.v1.signer) = "from";

  string from = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string to = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
 
  string denom = 3;

  uint64 amount = 4;

  bool retire = 5;
  
}

message MsgTransferCreditsResponse {

}

message MsgRetireCredits {
  option (cosmos.msg.v1.signer) = "owner";

  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string denom = 2;
  uint64 amount = 3;

}

message MsgRetireCreditsResponse {
  string owner = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string denom = 2;
  CreditAmount balance = 3;

}