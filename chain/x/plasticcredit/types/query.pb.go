// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: empowerchain/plasticcredit/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetIdCountersRequest struct {
}

func (m *QueryGetIdCountersRequest) Reset()         { *m = QueryGetIdCountersRequest{} }
func (m *QueryGetIdCountersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIdCountersRequest) ProtoMessage()    {}
func (*QueryGetIdCountersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{2}
}
func (m *QueryGetIdCountersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIdCountersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIdCountersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIdCountersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIdCountersRequest.Merge(m, src)
}
func (m *QueryGetIdCountersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIdCountersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIdCountersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIdCountersRequest proto.InternalMessageInfo

type QueryGetIdCountersResponse struct {
	IdCounters IdCounters `protobuf:"bytes,1,opt,name=id_counters,json=idCounters,proto3" json:"id_counters"`
}

func (m *QueryGetIdCountersResponse) Reset()         { *m = QueryGetIdCountersResponse{} }
func (m *QueryGetIdCountersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIdCountersResponse) ProtoMessage()    {}
func (*QueryGetIdCountersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{3}
}
func (m *QueryGetIdCountersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIdCountersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIdCountersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIdCountersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIdCountersResponse.Merge(m, src)
}
func (m *QueryGetIdCountersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIdCountersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIdCountersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIdCountersResponse proto.InternalMessageInfo

func (m *QueryGetIdCountersResponse) GetIdCounters() IdCounters {
	if m != nil {
		return m.IdCounters
	}
	return IdCounters{}
}

type QueryGetIssuerRequest struct {
	IssuerId uint64 `protobuf:"varint,1,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
}

func (m *QueryGetIssuerRequest) Reset()         { *m = QueryGetIssuerRequest{} }
func (m *QueryGetIssuerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssuerRequest) ProtoMessage()    {}
func (*QueryGetIssuerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{4}
}
func (m *QueryGetIssuerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssuerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssuerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssuerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssuerRequest.Merge(m, src)
}
func (m *QueryGetIssuerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssuerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssuerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssuerRequest proto.InternalMessageInfo

func (m *QueryGetIssuerRequest) GetIssuerId() uint64 {
	if m != nil {
		return m.IssuerId
	}
	return 0
}

type QueryGetIssuerResponse struct {
	Issuer Issuer `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer"`
}

func (m *QueryGetIssuerResponse) Reset()         { *m = QueryGetIssuerResponse{} }
func (m *QueryGetIssuerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetIssuerResponse) ProtoMessage()    {}
func (*QueryGetIssuerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{5}
}
func (m *QueryGetIssuerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetIssuerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetIssuerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetIssuerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetIssuerResponse.Merge(m, src)
}
func (m *QueryGetIssuerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetIssuerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetIssuerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetIssuerResponse proto.InternalMessageInfo

func (m *QueryGetIssuerResponse) GetIssuer() Issuer {
	if m != nil {
		return m.Issuer
	}
	return Issuer{}
}

type QueryAllIssuerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssuerRequest) Reset()         { *m = QueryAllIssuerRequest{} }
func (m *QueryAllIssuerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssuerRequest) ProtoMessage()    {}
func (*QueryAllIssuerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{6}
}
func (m *QueryAllIssuerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssuerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssuerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssuerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssuerRequest.Merge(m, src)
}
func (m *QueryAllIssuerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssuerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssuerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssuerRequest proto.InternalMessageInfo

func (m *QueryAllIssuerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllIssuerResponse struct {
	Issuer     []Issuer            `protobuf:"bytes,1,rep,name=issuer,proto3" json:"issuer"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllIssuerResponse) Reset()         { *m = QueryAllIssuerResponse{} }
func (m *QueryAllIssuerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllIssuerResponse) ProtoMessage()    {}
func (*QueryAllIssuerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{7}
}
func (m *QueryAllIssuerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllIssuerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllIssuerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllIssuerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllIssuerResponse.Merge(m, src)
}
func (m *QueryAllIssuerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllIssuerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllIssuerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllIssuerResponse proto.InternalMessageInfo

func (m *QueryAllIssuerResponse) GetIssuer() []Issuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

func (m *QueryAllIssuerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCreditClassRequest struct {
	CreditClassId uint64 `protobuf:"varint,1,opt,name=credit_class_id,json=creditClassId,proto3" json:"credit_class_id,omitempty"`
}

func (m *QueryGetCreditClassRequest) Reset()         { *m = QueryGetCreditClassRequest{} }
func (m *QueryGetCreditClassRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreditClassRequest) ProtoMessage()    {}
func (*QueryGetCreditClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{8}
}
func (m *QueryGetCreditClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreditClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreditClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreditClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreditClassRequest.Merge(m, src)
}
func (m *QueryGetCreditClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreditClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreditClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreditClassRequest proto.InternalMessageInfo

func (m *QueryGetCreditClassRequest) GetCreditClassId() uint64 {
	if m != nil {
		return m.CreditClassId
	}
	return 0
}

type QueryGetCreditClassResponse struct {
	CreditClass CreditClass `protobuf:"bytes,1,opt,name=credit_class,json=creditClass,proto3" json:"credit_class"`
}

func (m *QueryGetCreditClassResponse) Reset()         { *m = QueryGetCreditClassResponse{} }
func (m *QueryGetCreditClassResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreditClassResponse) ProtoMessage()    {}
func (*QueryGetCreditClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{9}
}
func (m *QueryGetCreditClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreditClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreditClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreditClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreditClassResponse.Merge(m, src)
}
func (m *QueryGetCreditClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreditClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreditClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreditClassResponse proto.InternalMessageInfo

func (m *QueryGetCreditClassResponse) GetCreditClass() CreditClass {
	if m != nil {
		return m.CreditClass
	}
	return CreditClass{}
}

type QueryAllCreditClassRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreditClassRequest) Reset()         { *m = QueryAllCreditClassRequest{} }
func (m *QueryAllCreditClassRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreditClassRequest) ProtoMessage()    {}
func (*QueryAllCreditClassRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{10}
}
func (m *QueryAllCreditClassRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreditClassRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreditClassRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreditClassRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreditClassRequest.Merge(m, src)
}
func (m *QueryAllCreditClassRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreditClassRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreditClassRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreditClassRequest proto.InternalMessageInfo

func (m *QueryAllCreditClassRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCreditClassResponse struct {
	CreditClass []CreditClass       `protobuf:"bytes,1,rep,name=credit_class,json=creditClass,proto3" json:"credit_class"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreditClassResponse) Reset()         { *m = QueryAllCreditClassResponse{} }
func (m *QueryAllCreditClassResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreditClassResponse) ProtoMessage()    {}
func (*QueryAllCreditClassResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{11}
}
func (m *QueryAllCreditClassResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreditClassResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreditClassResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreditClassResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreditClassResponse.Merge(m, src)
}
func (m *QueryAllCreditClassResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreditClassResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreditClassResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreditClassResponse proto.InternalMessageInfo

func (m *QueryAllCreditClassResponse) GetCreditClass() []CreditClass {
	if m != nil {
		return m.CreditClass
	}
	return nil
}

func (m *QueryAllCreditClassResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProjectRequest struct {
	ProjectId uint64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (m *QueryGetProjectRequest) Reset()         { *m = QueryGetProjectRequest{} }
func (m *QueryGetProjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProjectRequest) ProtoMessage()    {}
func (*QueryGetProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{12}
}
func (m *QueryGetProjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProjectRequest.Merge(m, src)
}
func (m *QueryGetProjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProjectRequest proto.InternalMessageInfo

func (m *QueryGetProjectRequest) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

type QueryGetProjectResponse struct {
	Project Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project"`
}

func (m *QueryGetProjectResponse) Reset()         { *m = QueryGetProjectResponse{} }
func (m *QueryGetProjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProjectResponse) ProtoMessage()    {}
func (*QueryGetProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{13}
}
func (m *QueryGetProjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProjectResponse.Merge(m, src)
}
func (m *QueryGetProjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProjectResponse proto.InternalMessageInfo

func (m *QueryGetProjectResponse) GetProject() Project {
	if m != nil {
		return m.Project
	}
	return Project{}
}

type QueryAllProjectRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProjectRequest) Reset()         { *m = QueryAllProjectRequest{} }
func (m *QueryAllProjectRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProjectRequest) ProtoMessage()    {}
func (*QueryAllProjectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{14}
}
func (m *QueryAllProjectRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProjectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProjectRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProjectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProjectRequest.Merge(m, src)
}
func (m *QueryAllProjectRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProjectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProjectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProjectRequest proto.InternalMessageInfo

func (m *QueryAllProjectRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProjectResponse struct {
	Project    []Project           `protobuf:"bytes,1,rep,name=project,proto3" json:"project"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProjectResponse) Reset()         { *m = QueryAllProjectResponse{} }
func (m *QueryAllProjectResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProjectResponse) ProtoMessage()    {}
func (*QueryAllProjectResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{15}
}
func (m *QueryAllProjectResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProjectResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProjectResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProjectResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProjectResponse.Merge(m, src)
}
func (m *QueryAllProjectResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProjectResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProjectResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProjectResponse proto.InternalMessageInfo

func (m *QueryAllProjectResponse) GetProject() []Project {
	if m != nil {
		return m.Project
	}
	return nil
}

func (m *QueryAllProjectResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCollectorRequest struct {
	CollectorId uint64 `protobuf:"varint,1,opt,name=collector_id,json=collectorId,proto3" json:"collector_id,omitempty"`
}

func (m *QueryGetCollectorRequest) Reset()         { *m = QueryGetCollectorRequest{} }
func (m *QueryGetCollectorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCollectorRequest) ProtoMessage()    {}
func (*QueryGetCollectorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{16}
}
func (m *QueryGetCollectorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCollectorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCollectorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCollectorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCollectorRequest.Merge(m, src)
}
func (m *QueryGetCollectorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCollectorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCollectorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCollectorRequest proto.InternalMessageInfo

func (m *QueryGetCollectorRequest) GetCollectorId() uint64 {
	if m != nil {
		return m.CollectorId
	}
	return 0
}

type QueryGetCollectorResponse struct {
	Collector Collector `protobuf:"bytes,1,opt,name=collector,proto3" json:"collector"`
}

func (m *QueryGetCollectorResponse) Reset()         { *m = QueryGetCollectorResponse{} }
func (m *QueryGetCollectorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCollectorResponse) ProtoMessage()    {}
func (*QueryGetCollectorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{17}
}
func (m *QueryGetCollectorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCollectorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCollectorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCollectorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCollectorResponse.Merge(m, src)
}
func (m *QueryGetCollectorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCollectorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCollectorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCollectorResponse proto.InternalMessageInfo

func (m *QueryGetCollectorResponse) GetCollector() Collector {
	if m != nil {
		return m.Collector
	}
	return Collector{}
}

type QueryAllCollectorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCollectorRequest) Reset()         { *m = QueryAllCollectorRequest{} }
func (m *QueryAllCollectorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCollectorRequest) ProtoMessage()    {}
func (*QueryAllCollectorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{18}
}
func (m *QueryAllCollectorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCollectorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCollectorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCollectorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCollectorRequest.Merge(m, src)
}
func (m *QueryAllCollectorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCollectorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCollectorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCollectorRequest proto.InternalMessageInfo

func (m *QueryAllCollectorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCollectorResponse struct {
	Collector  []Collector         `protobuf:"bytes,1,rep,name=collector,proto3" json:"collector"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCollectorResponse) Reset()         { *m = QueryAllCollectorResponse{} }
func (m *QueryAllCollectorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCollectorResponse) ProtoMessage()    {}
func (*QueryAllCollectorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{19}
}
func (m *QueryAllCollectorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCollectorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCollectorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCollectorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCollectorResponse.Merge(m, src)
}
func (m *QueryAllCollectorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCollectorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCollectorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCollectorResponse proto.InternalMessageInfo

func (m *QueryAllCollectorResponse) GetCollector() []Collector {
	if m != nil {
		return m.Collector
	}
	return nil
}

func (m *QueryAllCollectorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCreditBatchRequest struct {
	BatchDenom string `protobuf:"bytes,1,opt,name=batch_denom,json=batchDenom,proto3" json:"batch_denom,omitempty"`
}

func (m *QueryGetCreditBatchRequest) Reset()         { *m = QueryGetCreditBatchRequest{} }
func (m *QueryGetCreditBatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreditBatchRequest) ProtoMessage()    {}
func (*QueryGetCreditBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{20}
}
func (m *QueryGetCreditBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreditBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreditBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreditBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreditBatchRequest.Merge(m, src)
}
func (m *QueryGetCreditBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreditBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreditBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreditBatchRequest proto.InternalMessageInfo

func (m *QueryGetCreditBatchRequest) GetBatchDenom() string {
	if m != nil {
		return m.BatchDenom
	}
	return ""
}

type QueryGetCreditBatchResponse struct {
	CreditBatch CreditBatch `protobuf:"bytes,1,opt,name=credit_batch,json=creditBatch,proto3" json:"credit_batch"`
}

func (m *QueryGetCreditBatchResponse) Reset()         { *m = QueryGetCreditBatchResponse{} }
func (m *QueryGetCreditBatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreditBatchResponse) ProtoMessage()    {}
func (*QueryGetCreditBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{21}
}
func (m *QueryGetCreditBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreditBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreditBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreditBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreditBatchResponse.Merge(m, src)
}
func (m *QueryGetCreditBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreditBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreditBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreditBatchResponse proto.InternalMessageInfo

func (m *QueryGetCreditBatchResponse) GetCreditBatch() CreditBatch {
	if m != nil {
		return m.CreditBatch
	}
	return CreditBatch{}
}

type QueryAllCreditBatchRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreditBatchRequest) Reset()         { *m = QueryAllCreditBatchRequest{} }
func (m *QueryAllCreditBatchRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreditBatchRequest) ProtoMessage()    {}
func (*QueryAllCreditBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{22}
}
func (m *QueryAllCreditBatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreditBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreditBatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreditBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreditBatchRequest.Merge(m, src)
}
func (m *QueryAllCreditBatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreditBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreditBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreditBatchRequest proto.InternalMessageInfo

func (m *QueryAllCreditBatchRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCreditBatchResponse struct {
	CreditBatch []CreditBatch       `protobuf:"bytes,1,rep,name=credit_batch,json=creditBatch,proto3" json:"credit_batch"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreditBatchResponse) Reset()         { *m = QueryAllCreditBatchResponse{} }
func (m *QueryAllCreditBatchResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreditBatchResponse) ProtoMessage()    {}
func (*QueryAllCreditBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{23}
}
func (m *QueryAllCreditBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreditBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreditBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreditBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreditBatchResponse.Merge(m, src)
}
func (m *QueryAllCreditBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreditBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreditBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreditBatchResponse proto.InternalMessageInfo

func (m *QueryAllCreditBatchResponse) GetCreditBatch() []CreditBatch {
	if m != nil {
		return m.CreditBatch
	}
	return nil
}

func (m *QueryAllCreditBatchResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCreditBalanceRequest struct {
	BatchDenom string `protobuf:"bytes,1,opt,name=batch_denom,json=batchDenom,proto3" json:"batch_denom,omitempty"`
	Owner      string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetCreditBalanceRequest) Reset()         { *m = QueryGetCreditBalanceRequest{} }
func (m *QueryGetCreditBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreditBalanceRequest) ProtoMessage()    {}
func (*QueryGetCreditBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{24}
}
func (m *QueryGetCreditBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreditBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreditBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreditBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreditBalanceRequest.Merge(m, src)
}
func (m *QueryGetCreditBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreditBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreditBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreditBalanceRequest proto.InternalMessageInfo

func (m *QueryGetCreditBalanceRequest) GetBatchDenom() string {
	if m != nil {
		return m.BatchDenom
	}
	return ""
}

func (m *QueryGetCreditBalanceRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetCreditBalanceResponse struct {
	CreditBalance CreditBalance `protobuf:"bytes,1,opt,name=creditBalance,proto3" json:"creditBalance"`
}

func (m *QueryGetCreditBalanceResponse) Reset()         { *m = QueryGetCreditBalanceResponse{} }
func (m *QueryGetCreditBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreditBalanceResponse) ProtoMessage()    {}
func (*QueryGetCreditBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{25}
}
func (m *QueryGetCreditBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreditBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreditBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreditBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreditBalanceResponse.Merge(m, src)
}
func (m *QueryGetCreditBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreditBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreditBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreditBalanceResponse proto.InternalMessageInfo

func (m *QueryGetCreditBalanceResponse) GetCreditBalance() CreditBalance {
	if m != nil {
		return m.CreditBalance
	}
	return CreditBalance{}
}

type QueryAllCreditBalanceRequest struct {
	BatchDenom string             `protobuf:"bytes,1,opt,name=batch_denom,json=batchDenom,proto3" json:"batch_denom,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreditBalanceRequest) Reset()         { *m = QueryAllCreditBalanceRequest{} }
func (m *QueryAllCreditBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreditBalanceRequest) ProtoMessage()    {}
func (*QueryAllCreditBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{26}
}
func (m *QueryAllCreditBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreditBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreditBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreditBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreditBalanceRequest.Merge(m, src)
}
func (m *QueryAllCreditBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreditBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreditBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreditBalanceRequest proto.InternalMessageInfo

func (m *QueryAllCreditBalanceRequest) GetBatchDenom() string {
	if m != nil {
		return m.BatchDenom
	}
	return ""
}

func (m *QueryAllCreditBalanceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCreditBalanceResponse struct {
	CreditBalance []CreditBalance     `protobuf:"bytes,1,rep,name=creditBalance,proto3" json:"creditBalance"`
	Pagination    *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreditBalanceResponse) Reset()         { *m = QueryAllCreditBalanceResponse{} }
func (m *QueryAllCreditBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreditBalanceResponse) ProtoMessage()    {}
func (*QueryAllCreditBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{27}
}
func (m *QueryAllCreditBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreditBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreditBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreditBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreditBalanceResponse.Merge(m, src)
}
func (m *QueryAllCreditBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreditBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreditBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreditBalanceResponse proto.InternalMessageInfo

func (m *QueryAllCreditBalanceResponse) GetCreditBalance() []CreditBalance {
	if m != nil {
		return m.CreditBalance
	}
	return nil
}

func (m *QueryAllCreditBalanceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetCreditDenomRequest struct {
	BatchDenom string `protobuf:"bytes,1,opt,name=batch_denom,json=batchDenom,proto3" json:"batch_denom,omitempty"`
}

func (m *QueryGetCreditDenomRequest) Reset()         { *m = QueryGetCreditDenomRequest{} }
func (m *QueryGetCreditDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreditDenomRequest) ProtoMessage()    {}
func (*QueryGetCreditDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{28}
}
func (m *QueryGetCreditDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreditDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreditDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreditDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreditDenomRequest.Merge(m, src)
}
func (m *QueryGetCreditDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreditDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreditDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreditDenomRequest proto.InternalMessageInfo

func (m *QueryGetCreditDenomRequest) GetBatchDenom() string {
	if m != nil {
		return m.BatchDenom
	}
	return ""
}

type QueryGetCreditDenomResponse struct {
	CreditDenom CreditDenom `protobuf:"bytes,1,opt,name=CreditDenom,proto3" json:"CreditDenom"`
}

func (m *QueryGetCreditDenomResponse) Reset()         { *m = QueryGetCreditDenomResponse{} }
func (m *QueryGetCreditDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetCreditDenomResponse) ProtoMessage()    {}
func (*QueryGetCreditDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{29}
}
func (m *QueryGetCreditDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetCreditDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetCreditDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetCreditDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetCreditDenomResponse.Merge(m, src)
}
func (m *QueryGetCreditDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetCreditDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetCreditDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetCreditDenomResponse proto.InternalMessageInfo

func (m *QueryGetCreditDenomResponse) GetCreditDenom() CreditDenom {
	if m != nil {
		return m.CreditDenom
	}
	return CreditDenom{}
}

type QueryAllCreditDenomRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreditDenomRequest) Reset()         { *m = QueryAllCreditDenomRequest{} }
func (m *QueryAllCreditDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreditDenomRequest) ProtoMessage()    {}
func (*QueryAllCreditDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{30}
}
func (m *QueryAllCreditDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreditDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreditDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreditDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreditDenomRequest.Merge(m, src)
}
func (m *QueryAllCreditDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreditDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreditDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreditDenomRequest proto.InternalMessageInfo

func (m *QueryAllCreditDenomRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllCreditDenomResponse struct {
	CreditDenom []CreditDenom       `protobuf:"bytes,1,rep,name=CreditDenom,proto3" json:"CreditDenom"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllCreditDenomResponse) Reset()         { *m = QueryAllCreditDenomResponse{} }
func (m *QueryAllCreditDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllCreditDenomResponse) ProtoMessage()    {}
func (*QueryAllCreditDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_07e89fd14debe1c1, []int{31}
}
func (m *QueryAllCreditDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllCreditDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllCreditDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllCreditDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllCreditDenomResponse.Merge(m, src)
}
func (m *QueryAllCreditDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllCreditDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllCreditDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllCreditDenomResponse proto.InternalMessageInfo

func (m *QueryAllCreditDenomResponse) GetCreditDenom() []CreditDenom {
	if m != nil {
		return m.CreditDenom
	}
	return nil
}

func (m *QueryAllCreditDenomResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryParamsResponse")
	proto.RegisterType((*QueryGetIdCountersRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetIdCountersRequest")
	proto.RegisterType((*QueryGetIdCountersResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetIdCountersResponse")
	proto.RegisterType((*QueryGetIssuerRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetIssuerRequest")
	proto.RegisterType((*QueryGetIssuerResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetIssuerResponse")
	proto.RegisterType((*QueryAllIssuerRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllIssuerRequest")
	proto.RegisterType((*QueryAllIssuerResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllIssuerResponse")
	proto.RegisterType((*QueryGetCreditClassRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetCreditClassRequest")
	proto.RegisterType((*QueryGetCreditClassResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetCreditClassResponse")
	proto.RegisterType((*QueryAllCreditClassRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllCreditClassRequest")
	proto.RegisterType((*QueryAllCreditClassResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllCreditClassResponse")
	proto.RegisterType((*QueryGetProjectRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetProjectRequest")
	proto.RegisterType((*QueryGetProjectResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetProjectResponse")
	proto.RegisterType((*QueryAllProjectRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllProjectRequest")
	proto.RegisterType((*QueryAllProjectResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllProjectResponse")
	proto.RegisterType((*QueryGetCollectorRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetCollectorRequest")
	proto.RegisterType((*QueryGetCollectorResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetCollectorResponse")
	proto.RegisterType((*QueryAllCollectorRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllCollectorRequest")
	proto.RegisterType((*QueryAllCollectorResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllCollectorResponse")
	proto.RegisterType((*QueryGetCreditBatchRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetCreditBatchRequest")
	proto.RegisterType((*QueryGetCreditBatchResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetCreditBatchResponse")
	proto.RegisterType((*QueryAllCreditBatchRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllCreditBatchRequest")
	proto.RegisterType((*QueryAllCreditBatchResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllCreditBatchResponse")
	proto.RegisterType((*QueryGetCreditBalanceRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetCreditBalanceRequest")
	proto.RegisterType((*QueryGetCreditBalanceResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetCreditBalanceResponse")
	proto.RegisterType((*QueryAllCreditBalanceRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllCreditBalanceRequest")
	proto.RegisterType((*QueryAllCreditBalanceResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllCreditBalanceResponse")
	proto.RegisterType((*QueryGetCreditDenomRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetCreditDenomRequest")
	proto.RegisterType((*QueryGetCreditDenomResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryGetCreditDenomResponse")
	proto.RegisterType((*QueryAllCreditDenomRequest)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllCreditDenomRequest")
	proto.RegisterType((*QueryAllCreditDenomResponse)(nil), "empowerchain.empowerchain.plasticcredit.QueryAllCreditDenomResponse")
}

func init() {
	proto.RegisterFile("empowerchain/plasticcredit/query.proto", fileDescriptor_07e89fd14debe1c1)
}

var fileDescriptor_07e89fd14debe1c1 = []byte{
	// 1405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0xcd, 0x6f, 0x1b, 0xd5,
	0x17, 0xcd, 0xab, 0xdb, 0xf4, 0xe7, 0xeb, 0xf6, 0x07, 0x7a, 0x04, 0x28, 0x4e, 0xeb, 0xc2, 0x2c,
	0x92, 0x0a, 0x81, 0xa7, 0x49, 0x43, 0x03, 0x6d, 0x43, 0x70, 0x9c, 0x0f, 0x59, 0xa8, 0x6a, 0xb0,
	0x28, 0x8b, 0x0a, 0x64, 0xc6, 0x33, 0x83, 0x33, 0x30, 0x9e, 0x71, 0x3d, 0x93, 0x7e, 0xc8, 0x64,
	0x03, 0x0b, 0xb6, 0x48, 0xfc, 0x23, 0x2c, 0xd8, 0xd1, 0x25, 0x95, 0x8a, 0x84, 0x50, 0x51, 0x37,
	0x08, 0x09, 0x84, 0x12, 0x58, 0xf0, 0x07, 0xb0, 0x47, 0xf3, 0xde, 0x1d, 0xcf, 0x1b, 0x7b, 0xe2,
	0xcc, 0x57, 0x57, 0x89, 0x9f, 0xdf, 0x3d, 0xef, 0x9e, 0x7b, 0xdf, 0x3d, 0x33, 0x27, 0x81, 0x39,
	0xbd, 0xdb, 0xb3, 0xef, 0xea, 0x7d, 0x75, 0x47, 0x31, 0x2c, 0xb9, 0x67, 0x2a, 0x8e, 0x6b, 0xa8,
	0x6a, 0x5f, 0xd7, 0x0c, 0x57, 0xbe, 0xbd, 0xab, 0xf7, 0xef, 0x57, 0x7b, 0x7d, 0xdb, 0xb5, 0xe9,
	0xbc, 0xb8, 0xaf, 0x1a, 0xfa, 0x10, 0x0a, 0x2a, 0xcf, 0x74, 0xec, 0x8e, 0xcd, 0x62, 0x64, 0xef,
	0x37, 0x1e, 0x5e, 0x3e, 0xdb, 0xb1, 0xed, 0x8e, 0xa9, 0xcb, 0x4a, 0xcf, 0x90, 0x15, 0xcb, 0xb2,
	0x5d, 0xc5, 0x35, 0x6c, 0xcb, 0xc1, 0x6f, 0x5f, 0x55, 0x6d, 0xa7, 0x6b, 0x3b, 0x72, 0x5b, 0x71,
	0x74, 0x7e, 0xaa, 0x7c, 0x67, 0xa1, 0xad, 0xbb, 0xca, 0x82, 0xdc, 0x53, 0x3a, 0x86, 0xc5, 0x36,
	0xe3, 0xde, 0xf9, 0x09, 0x09, 0xf7, 0x94, 0xbe, 0xd2, 0xf5, 0x41, 0x5f, 0x9b, 0xb0, 0xd1, 0xd0,
	0x5a, 0xaa, 0xbd, 0x6b, 0xb9, 0x7a, 0xdf, 0x89, 0x01, 0x6b, 0x38, 0xce, 0xae, 0xde, 0xc7, 0x8d,
	0xaf, 0x4f, 0xd8, 0xc8, 0x7f, 0xb4, 0x54, 0x53, 0x71, 0x7c, 0xdc, 0x0b, 0x93, 0xd2, 0xed, 0xdb,
	0x9f, 0xea, 0xaa, 0xeb, 0x17, 0x61, 0x12, 0xb0, 0x6d, 0x9a, 0xba, 0xea, 0xda, 0x09, 0x92, 0x68,
	0x2b, 0xae, 0xba, 0x83, 0xdb, 0xe5, 0x38, 0xdb, 0x4d, 0xc5, 0x52, 0xf5, 0xf8, 0xf8, 0x9a, 0x6e,
	0xd9, 0x5d, 0xdc, 0x5e, 0x3d, 0x7a, 0xbb, 0xd2, 0xf5, 0xea, 0x1d, 0xa3, 0x35, 0xbd, 0xbe, 0x7d,
	0x47, 0xb7, 0x5a, 0x9a, 0xe2, 0x2a, 0x71, 0xb2, 0xf7, 0x0b, 0xd3, 0x32, 0xac, 0x4f, 0xf0, 0xb2,
	0x49, 0x33, 0x40, 0xdf, 0xf3, 0x2e, 0xd1, 0x36, 0xbb, 0x0e, 0x4d, 0xfd, 0xf6, 0xae, 0xee, 0xb8,
	0x92, 0x06, 0xcf, 0x85, 0x56, 0x9d, 0x9e, 0x6d, 0x39, 0x3a, 0xbd, 0x0e, 0xd3, 0xfc, 0xda, 0x9c,
	0x21, 0x2f, 0x93, 0x0b, 0xa5, 0x45, 0xb9, 0x1a, 0xf3, 0xa6, 0x57, 0x39, 0xd0, 0xda, 0xf1, 0x47,
	0x7f, 0x9c, 0x9f, 0x6a, 0x22, 0x88, 0x34, 0x0b, 0x2f, 0xb1, 0x53, 0xb6, 0x74, 0xb7, 0xa1, 0xd5,
	0xf1, 0x8e, 0xf9, 0x29, 0xdc, 0x83, 0x72, 0xd4, 0x97, 0x98, 0xc9, 0x2d, 0x28, 0x09, 0xf7, 0x12,
	0xd3, 0xb9, 0x14, 0x3b, 0x9d, 0x00, 0x11, 0x53, 0x02, 0x63, 0xb8, 0x22, 0x2d, 0xc1, 0xf3, 0xc3,
	0x93, 0xd9, 0x6d, 0xc6, 0x94, 0xe8, 0x2c, 0x14, 0xf9, 0xf5, 0x6e, 0x19, 0x1a, 0x3b, 0xf2, 0x78,
	0xf3, 0x7f, 0x7c, 0xa1, 0xa1, 0x49, 0x1d, 0x78, 0x61, 0x34, 0x2a, 0xa8, 0x1a, 0xdf, 0x95, 0xb8,
	0x6a, 0x1c, 0xc8, 0xaf, 0x1a, 0x07, 0x91, 0x5a, 0x98, 0x5e, 0xcd, 0x34, 0xc3, 0xe9, 0x6d, 0x02,
	0x04, 0x0a, 0x80, 0x67, 0xcd, 0x55, 0xb9, 0x5c, 0x54, 0x3d, 0xb9, 0xa8, 0x72, 0x91, 0x42, 0xb9,
	0xa8, 0x6e, 0x2b, 0x1d, 0x1d, 0x63, 0x9b, 0x42, 0xa4, 0xf4, 0x2d, 0x41, 0x2a, 0xc2, 0x09, 0x11,
	0x54, 0x0a, 0x99, 0xa9, 0xd0, 0xad, 0x50, 0xc6, 0xc7, 0x58, 0xc6, 0xf3, 0x47, 0x66, 0xcc, 0x73,
	0x09, 0xa5, 0xbc, 0x1e, 0x5c, 0x96, 0x3a, 0x3b, 0xaf, 0xee, 0xc9, 0x8a, 0x5f, 0x98, 0x39, 0x78,
	0x46, 0x54, 0x9b, 0xa0, 0x7b, 0xa7, 0xd5, 0x60, 0x73, 0x43, 0x93, 0x3e, 0x87, 0xd9, 0x48, 0x14,
	0x24, 0xff, 0x11, 0x9c, 0x12, 0x61, 0xb0, 0xc2, 0x4b, 0xb1, 0x4b, 0x20, 0x60, 0x62, 0x1d, 0x4a,
	0xc2, 0xf9, 0x92, 0x86, 0x1c, 0x6a, 0xa6, 0x19, 0xc1, 0x21, 0xaf, 0xe6, 0x3e, 0x24, 0x48, 0x72,
	0xf4, 0x98, 0x43, 0x49, 0x16, 0x72, 0x24, 0x99, 0x5f, 0xc7, 0x97, 0x83, 0x71, 0xdb, 0xe6, 0x8f,
	0x06, 0xbf, 0x52, 0xe7, 0x00, 0xf0, 0x61, 0x11, 0x34, 0xba, 0x88, 0x2b, 0x0d, 0x4d, 0xfa, 0x0c,
	0x5e, 0x1c, 0x0b, 0x44, 0xee, 0xdb, 0x70, 0x12, 0xf7, 0x61, 0x81, 0x2f, 0xc6, 0xd7, 0x37, 0x1e,
	0x87, 0x94, 0x7d, 0x18, 0xe9, 0xe3, 0x60, 0x92, 0x46, 0xb2, 0xcc, 0xab, 0x9f, 0xdf, 0x11, 0xe4,
	0x23, 0x1e, 0x11, 0xc5, 0xa7, 0x90, 0x03, 0x9f, 0xfc, 0xda, 0xb7, 0x02, 0x67, 0x86, 0xa3, 0xe6,
	0x3f, 0x96, 0xfc, 0xd2, 0xbc, 0x02, 0xa7, 0x84, 0x47, 0x95, 0xdf, 0xc2, 0xd2, 0x70, 0xad, 0xa1,
	0x49, 0x4e, 0xf0, 0xe4, 0x10, 0xc2, 0x91, 0xf6, 0x07, 0x50, 0x1c, 0xee, 0xc5, 0xca, 0x2e, 0xc6,
	0xbf, 0xbf, 0x7e, 0x24, 0x52, 0x0f, 0xa0, 0xa4, 0x36, 0xe6, 0xec, 0x4d, 0xce, 0x68, 0xce, 0x79,
	0xb5, 0xf3, 0x01, 0x41, 0x66, 0xe1, 0x43, 0xa2, 0x99, 0x15, 0x72, 0x62, 0x96, 0x67, 0x5b, 0x47,
	0x74, 0x78, 0xcd, 0x7b, 0xb3, 0xf2, 0x8b, 0x74, 0x1e, 0x4a, 0xec, 0x4d, 0x8b, 0xbf, 0x0f, 0xb1,
	0x2a, 0x15, 0x9b, 0xc0, 0x96, 0xd6, 0xbd, 0x95, 0x71, 0x01, 0xc6, 0xf0, 0x31, 0x6d, 0x62, 0x31,
	0x29, 0x05, 0x98, 0x61, 0x86, 0xb5, 0x89, 0x2d, 0x8d, 0x0b, 0x70, 0x28, 0xf9, 0xa7, 0x27, 0xc0,
	0x47, 0x91, 0x2c, 0xe4, 0x48, 0x32, 0xbf, 0x56, 0xdf, 0x84, 0xb3, 0xa3, 0xbd, 0x62, 0x6f, 0xc5,
	0x71, 0x9b, 0x4d, 0x67, 0xe0, 0x84, 0x7d, 0xd7, 0xd2, 0xfb, 0x2c, 0x89, 0x62, 0x93, 0x7f, 0x90,
	0xbe, 0x24, 0x70, 0xee, 0x10, 0x5c, 0x2c, 0x50, 0x1b, 0x4e, 0xab, 0xe2, 0x17, 0xd8, 0x8b, 0xcb,
	0x89, 0x2b, 0xc4, 0xa2, 0xb1, 0x46, 0x61, 0x48, 0xe9, 0x2b, 0x82, 0xec, 0x84, 0x26, 0x25, 0x63,
	0xb7, 0x19, 0x51, 0xe7, 0x34, 0xd7, 0xe5, 0x27, 0xbf, 0x1e, 0xe3, 0x99, 0x1c, 0x5e, 0x8f, 0x42,
	0xce, 0xf5, 0x78, 0x8a, 0x02, 0xc1, 0xaa, 0x15, 0x5b, 0x20, 0x06, 0xa3, 0x02, 0x81, 0xe1, 0x58,
	0x8a, 0x0f, 0xa1, 0x24, 0x2c, 0xa7, 0xd4, 0x07, 0x16, 0xeb, 0x8f, 0x8e, 0xb0, 0x34, 0xae, 0x0f,
	0xa1, 0xdc, 0xf3, 0xd2, 0x87, 0x1f, 0xc6, 0xf4, 0xe1, 0x08, 0x8e, 0x85, 0x1c, 0x39, 0xe6, 0xd6,
	0xe8, 0xc5, 0xef, 0x67, 0xe1, 0x04, 0xa3, 0x41, 0x1f, 0x10, 0x98, 0xe6, 0xf6, 0x8f, 0x5e, 0x8d,
	0x9d, 0xe6, 0xb8, 0x27, 0x2d, 0x5f, 0x4b, 0x17, 0xcc, 0x73, 0x93, 0x96, 0xbf, 0x78, 0xf2, 0xd7,
	0x37, 0xc7, 0x16, 0xa8, 0x1c, 0x76, 0xc8, 0x47, 0xfe, 0x81, 0x84, 0x3e, 0x21, 0x00, 0x81, 0x5d,
	0xa4, 0x6b, 0xc9, 0xb2, 0x88, 0xb2, 0xb6, 0xe5, 0x7a, 0x26, 0x0c, 0x24, 0x74, 0x8d, 0x11, 0xba,
	0x4c, 0x97, 0x62, 0x13, 0x12, 0x0c, 0x33, 0xfd, 0x99, 0xc0, 0x34, 0xb7, 0x64, 0xf4, 0xed, 0xe4,
	0xd9, 0x88, 0xb6, 0xb3, 0xbc, 0x9a, 0x3a, 0x1e, 0x99, 0xd4, 0x19, 0x93, 0x15, 0x7a, 0x35, 0x3e,
	0x13, 0x06, 0x20, 0x0f, 0x86, 0x6e, 0x7c, 0x8f, 0x3e, 0x24, 0x50, 0xe4, 0xb8, 0x35, 0xd3, 0x4c,
	0xca, 0x69, 0xd4, 0x4a, 0x27, 0xe5, 0x34, 0x66, 0x94, 0x53, 0x5c, 0x37, 0xb4, 0xc4, 0xff, 0x10,
	0x7f, 0xbe, 0xb9, 0x61, 0x4a, 0x7e, 0x57, 0xc6, 0xcd, 0x63, 0x79, 0x3d, 0x1b, 0x08, 0x72, 0xba,
	0xc1, 0x38, 0x35, 0xe8, 0x56, 0x6c, 0x4e, 0xa2, 0x93, 0x94, 0x07, 0x23, 0x1e, 0x7c, 0x8f, 0xfe,
	0x46, 0xe0, 0xff, 0xc2, 0x41, 0x5e, 0xe3, 0xea, 0x89, 0x0b, 0x9f, 0x9d, 0x6e, 0xb4, 0x13, 0x96,
	0x56, 0x18, 0xdd, 0x65, 0xfa, 0x46, 0x2a, 0xba, 0x9e, 0x6e, 0x9c, 0x44, 0x17, 0x45, 0x93, 0x8f,
	0x48, 0xd8, 0x2d, 0x96, 0xdf, 0x49, 0x0f, 0x80, 0x6c, 0x36, 0x18, 0x9b, 0x55, 0xba, 0x12, 0x5f,
	0xff, 0x38, 0x82, 0x3c, 0x08, 0xdc, 0xf4, 0x1e, 0xfd, 0x91, 0x00, 0x20, 0xb4, 0xd7, 0xae, 0xe4,
	0x73, 0x92, 0x8d, 0xd8, 0xb8, 0xc9, 0x95, 0xde, 0x64, 0xc4, 0x16, 0xe9, 0xc5, 0xa4, 0xc4, 0xe8,
	0xef, 0x04, 0x8a, 0x43, 0x53, 0x44, 0x6b, 0xc9, 0x67, 0x64, 0xc4, 0x04, 0x96, 0xd7, 0xb2, 0x40,
	0x20, 0x9d, 0x06, 0xa3, 0x53, 0xa7, 0xb5, 0xf8, 0xb7, 0xce, 0xc7, 0x90, 0x07, 0xa2, 0x6d, 0xde,
	0xa3, 0xbf, 0x10, 0x38, 0x35, 0x3c, 0xc0, 0xeb, 0x56, 0x2d, 0xf9, 0x5c, 0x64, 0xa4, 0x18, 0xe5,
	0x62, 0xa5, 0x2b, 0x8c, 0xe2, 0x12, 0x5d, 0x4c, 0x4e, 0x91, 0xfe, 0x3d, 0x94, 0x47, 0x6e, 0x67,
	0xd2, 0xca, 0xa3, 0x68, 0xed, 0x52, 0xcb, 0x63, 0xc8, 0xb8, 0x49, 0xef, 0x32, 0x5a, 0x1b, 0xb4,
	0x9e, 0x54, 0x2f, 0xd8, 0xfb, 0xad, 0x3c, 0x10, 0xde, 0x7c, 0x45, 0x69, 0x64, 0x87, 0x64, 0x91,
	0xc6, 0x2c, 0x54, 0xa3, 0x3d, 0x6a, 0x7a, 0x69, 0x64, 0x1c, 0xe9, 0xbf, 0x04, 0x4e, 0x87, 0x4c,
	0x07, 0xdd, 0x48, 0xdd, 0x01, 0xd1, 0x95, 0x95, 0x37, 0xb3, 0xc2, 0x20, 0xbf, 0x9b, 0x8c, 0xdf,
	0x0d, 0x7a, 0x3d, 0x39, 0x3f, 0x06, 0x14, 0x6e, 0xa6, 0x3c, 0x60, 0xd6, 0x76, 0x8f, 0xee, 0x13,
	0x78, 0x36, 0x74, 0xa0, 0xd7, 0xd6, 0x8d, 0xd4, 0x1d, 0xc9, 0x42, 0xfd, 0x30, 0x37, 0x29, 0xad,
	0x32, 0xea, 0x6f, 0xd1, 0xe5, 0x94, 0xd4, 0x85, 0x09, 0xe5, 0x8e, 0x22, 0xed, 0x84, 0x8a, 0xe6,
	0x2a, 0xf5, 0x84, 0x86, 0xac, 0x53, 0xfa, 0x09, 0x65, 0x7d, 0x3c, 0x74, 0x42, 0xd9, 0x21, 0x59,
	0x26, 0x34, 0x0b, 0xd5, 0x68, 0x97, 0x98, 0x7e, 0x42, 0x19, 0xbb, 0xb5, 0xf7, 0x1f, 0xed, 0x57,
	0xc8, 0xe3, 0xfd, 0x0a, 0xf9, 0x73, 0xbf, 0x42, 0xbe, 0x3e, 0xa8, 0x4c, 0x3d, 0x3e, 0xa8, 0x4c,
	0xfd, 0x7a, 0x50, 0x99, 0xba, 0x75, 0xa5, 0x63, 0xb8, 0x3b, 0xbb, 0xed, 0xaa, 0x6a, 0x77, 0x27,
	0x40, 0xdf, 0x1b, 0x01, 0x77, 0xef, 0xf7, 0x74, 0xa7, 0x3d, 0xcd, 0xfe, 0xe5, 0x78, 0xe9, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x2d, 0xc2, 0xbe, 0x48, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a IdCounters by index.
	IdCounters(ctx context.Context, in *QueryGetIdCountersRequest, opts ...grpc.CallOption) (*QueryGetIdCountersResponse, error)
	// Queries a Issuer by index.
	Issuer(ctx context.Context, in *QueryGetIssuerRequest, opts ...grpc.CallOption) (*QueryGetIssuerResponse, error)
	// Queries a list of Issuer items.
	IssuerAll(ctx context.Context, in *QueryAllIssuerRequest, opts ...grpc.CallOption) (*QueryAllIssuerResponse, error)
	// Queries a CreditClass by index.
	CreditClass(ctx context.Context, in *QueryGetCreditClassRequest, opts ...grpc.CallOption) (*QueryGetCreditClassResponse, error)
	// Queries a list of CreditClass items.
	CreditClassAll(ctx context.Context, in *QueryAllCreditClassRequest, opts ...grpc.CallOption) (*QueryAllCreditClassResponse, error)
	// Queries a Project by index.
	Project(ctx context.Context, in *QueryGetProjectRequest, opts ...grpc.CallOption) (*QueryGetProjectResponse, error)
	// Queries a list of Project items.
	ProjectAll(ctx context.Context, in *QueryAllProjectRequest, opts ...grpc.CallOption) (*QueryAllProjectResponse, error)
	// Queries a Collector by index.
	Collector(ctx context.Context, in *QueryGetCollectorRequest, opts ...grpc.CallOption) (*QueryGetCollectorResponse, error)
	// Queries a list of Collector items.
	CollectorAll(ctx context.Context, in *QueryAllCollectorRequest, opts ...grpc.CallOption) (*QueryAllCollectorResponse, error)
	// Queries a CreditBatch by index.
	CreditBatch(ctx context.Context, in *QueryGetCreditBatchRequest, opts ...grpc.CallOption) (*QueryGetCreditBatchResponse, error)
	// Queries a list of CreditBatch items.
	CreditBatchAll(ctx context.Context, in *QueryAllCreditBatchRequest, opts ...grpc.CallOption) (*QueryAllCreditBatchResponse, error)
	// Queries a CreditBalance by index.
	CreditBalance(ctx context.Context, in *QueryGetCreditBalanceRequest, opts ...grpc.CallOption) (*QueryGetCreditBalanceResponse, error)
	// Queries a list of CreditBalance items.
	CreditBalanceAll(ctx context.Context, in *QueryAllCreditBalanceRequest, opts ...grpc.CallOption) (*QueryAllCreditBalanceResponse, error)
	// Queries a CreditDenom by id.
	CreditDenom(ctx context.Context, in *QueryGetCreditDenomRequest, opts ...grpc.CallOption) (*QueryGetCreditDenomResponse, error)
	// Queries a list of CreditDenom items.
	CreditDenomAll(ctx context.Context, in *QueryAllCreditDenomRequest, opts ...grpc.CallOption) (*QueryAllCreditDenomResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IdCounters(ctx context.Context, in *QueryGetIdCountersRequest, opts ...grpc.CallOption) (*QueryGetIdCountersResponse, error) {
	out := new(QueryGetIdCountersResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/IdCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Issuer(ctx context.Context, in *QueryGetIssuerRequest, opts ...grpc.CallOption) (*QueryGetIssuerResponse, error) {
	out := new(QueryGetIssuerResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/Issuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IssuerAll(ctx context.Context, in *QueryAllIssuerRequest, opts ...grpc.CallOption) (*QueryAllIssuerResponse, error) {
	out := new(QueryAllIssuerResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/IssuerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditClass(ctx context.Context, in *QueryGetCreditClassRequest, opts ...grpc.CallOption) (*QueryGetCreditClassResponse, error) {
	out := new(QueryGetCreditClassResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/CreditClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditClassAll(ctx context.Context, in *QueryAllCreditClassRequest, opts ...grpc.CallOption) (*QueryAllCreditClassResponse, error) {
	out := new(QueryAllCreditClassResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/CreditClassAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Project(ctx context.Context, in *QueryGetProjectRequest, opts ...grpc.CallOption) (*QueryGetProjectResponse, error) {
	out := new(QueryGetProjectResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/Project", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProjectAll(ctx context.Context, in *QueryAllProjectRequest, opts ...grpc.CallOption) (*QueryAllProjectResponse, error) {
	out := new(QueryAllProjectResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/ProjectAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Collector(ctx context.Context, in *QueryGetCollectorRequest, opts ...grpc.CallOption) (*QueryGetCollectorResponse, error) {
	out := new(QueryGetCollectorResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/Collector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CollectorAll(ctx context.Context, in *QueryAllCollectorRequest, opts ...grpc.CallOption) (*QueryAllCollectorResponse, error) {
	out := new(QueryAllCollectorResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/CollectorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditBatch(ctx context.Context, in *QueryGetCreditBatchRequest, opts ...grpc.CallOption) (*QueryGetCreditBatchResponse, error) {
	out := new(QueryGetCreditBatchResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/CreditBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditBatchAll(ctx context.Context, in *QueryAllCreditBatchRequest, opts ...grpc.CallOption) (*QueryAllCreditBatchResponse, error) {
	out := new(QueryAllCreditBatchResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/CreditBatchAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditBalance(ctx context.Context, in *QueryGetCreditBalanceRequest, opts ...grpc.CallOption) (*QueryGetCreditBalanceResponse, error) {
	out := new(QueryGetCreditBalanceResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/CreditBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditBalanceAll(ctx context.Context, in *QueryAllCreditBalanceRequest, opts ...grpc.CallOption) (*QueryAllCreditBalanceResponse, error) {
	out := new(QueryAllCreditBalanceResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/CreditBalanceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditDenom(ctx context.Context, in *QueryGetCreditDenomRequest, opts ...grpc.CallOption) (*QueryGetCreditDenomResponse, error) {
	out := new(QueryGetCreditDenomResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/CreditDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CreditDenomAll(ctx context.Context, in *QueryAllCreditDenomRequest, opts ...grpc.CallOption) (*QueryAllCreditDenomResponse, error) {
	out := new(QueryAllCreditDenomResponse)
	err := c.cc.Invoke(ctx, "/empowerchain.empowerchain.plasticcredit.Query/CreditDenomAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a IdCounters by index.
	IdCounters(context.Context, *QueryGetIdCountersRequest) (*QueryGetIdCountersResponse, error)
	// Queries a Issuer by index.
	Issuer(context.Context, *QueryGetIssuerRequest) (*QueryGetIssuerResponse, error)
	// Queries a list of Issuer items.
	IssuerAll(context.Context, *QueryAllIssuerRequest) (*QueryAllIssuerResponse, error)
	// Queries a CreditClass by index.
	CreditClass(context.Context, *QueryGetCreditClassRequest) (*QueryGetCreditClassResponse, error)
	// Queries a list of CreditClass items.
	CreditClassAll(context.Context, *QueryAllCreditClassRequest) (*QueryAllCreditClassResponse, error)
	// Queries a Project by index.
	Project(context.Context, *QueryGetProjectRequest) (*QueryGetProjectResponse, error)
	// Queries a list of Project items.
	ProjectAll(context.Context, *QueryAllProjectRequest) (*QueryAllProjectResponse, error)
	// Queries a Collector by index.
	Collector(context.Context, *QueryGetCollectorRequest) (*QueryGetCollectorResponse, error)
	// Queries a list of Collector items.
	CollectorAll(context.Context, *QueryAllCollectorRequest) (*QueryAllCollectorResponse, error)
	// Queries a CreditBatch by index.
	CreditBatch(context.Context, *QueryGetCreditBatchRequest) (*QueryGetCreditBatchResponse, error)
	// Queries a list of CreditBatch items.
	CreditBatchAll(context.Context, *QueryAllCreditBatchRequest) (*QueryAllCreditBatchResponse, error)
	// Queries a CreditBalance by index.
	CreditBalance(context.Context, *QueryGetCreditBalanceRequest) (*QueryGetCreditBalanceResponse, error)
	// Queries a list of CreditBalance items.
	CreditBalanceAll(context.Context, *QueryAllCreditBalanceRequest) (*QueryAllCreditBalanceResponse, error)
	// Queries a CreditDenom by id.
	CreditDenom(context.Context, *QueryGetCreditDenomRequest) (*QueryGetCreditDenomResponse, error)
	// Queries a list of CreditDenom items.
	CreditDenomAll(context.Context, *QueryAllCreditDenomRequest) (*QueryAllCreditDenomResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) IdCounters(ctx context.Context, req *QueryGetIdCountersRequest) (*QueryGetIdCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdCounters not implemented")
}
func (*UnimplementedQueryServer) Issuer(ctx context.Context, req *QueryGetIssuerRequest) (*QueryGetIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issuer not implemented")
}
func (*UnimplementedQueryServer) IssuerAll(ctx context.Context, req *QueryAllIssuerRequest) (*QueryAllIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuerAll not implemented")
}
func (*UnimplementedQueryServer) CreditClass(ctx context.Context, req *QueryGetCreditClassRequest) (*QueryGetCreditClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditClass not implemented")
}
func (*UnimplementedQueryServer) CreditClassAll(ctx context.Context, req *QueryAllCreditClassRequest) (*QueryAllCreditClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditClassAll not implemented")
}
func (*UnimplementedQueryServer) Project(ctx context.Context, req *QueryGetProjectRequest) (*QueryGetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Project not implemented")
}
func (*UnimplementedQueryServer) ProjectAll(ctx context.Context, req *QueryAllProjectRequest) (*QueryAllProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectAll not implemented")
}
func (*UnimplementedQueryServer) Collector(ctx context.Context, req *QueryGetCollectorRequest) (*QueryGetCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Collector not implemented")
}
func (*UnimplementedQueryServer) CollectorAll(ctx context.Context, req *QueryAllCollectorRequest) (*QueryAllCollectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectorAll not implemented")
}
func (*UnimplementedQueryServer) CreditBatch(ctx context.Context, req *QueryGetCreditBatchRequest) (*QueryGetCreditBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditBatch not implemented")
}
func (*UnimplementedQueryServer) CreditBatchAll(ctx context.Context, req *QueryAllCreditBatchRequest) (*QueryAllCreditBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditBatchAll not implemented")
}
func (*UnimplementedQueryServer) CreditBalance(ctx context.Context, req *QueryGetCreditBalanceRequest) (*QueryGetCreditBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditBalance not implemented")
}
func (*UnimplementedQueryServer) CreditBalanceAll(ctx context.Context, req *QueryAllCreditBalanceRequest) (*QueryAllCreditBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditBalanceAll not implemented")
}
func (*UnimplementedQueryServer) CreditDenom(ctx context.Context, req *QueryGetCreditDenomRequest) (*QueryGetCreditDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditDenom not implemented")
}
func (*UnimplementedQueryServer) CreditDenomAll(ctx context.Context, req *QueryAllCreditDenomRequest) (*QueryAllCreditDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreditDenomAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IdCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIdCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IdCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/IdCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IdCounters(ctx, req.(*QueryGetIdCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Issuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Issuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/Issuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Issuer(ctx, req.(*QueryGetIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IssuerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IssuerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/IssuerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IssuerAll(ctx, req.(*QueryAllIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCreditClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/CreditClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditClass(ctx, req.(*QueryGetCreditClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditClassAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCreditClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditClassAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/CreditClassAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditClassAll(ctx, req.(*QueryAllCreditClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Project_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Project(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/Project",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Project(ctx, req.(*QueryGetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProjectAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProjectAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/ProjectAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProjectAll(ctx, req.(*QueryAllProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Collector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Collector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/Collector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Collector(ctx, req.(*QueryGetCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CollectorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCollectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CollectorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/CollectorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CollectorAll(ctx, req.(*QueryAllCollectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCreditBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/CreditBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditBatch(ctx, req.(*QueryGetCreditBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditBatchAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCreditBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditBatchAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/CreditBatchAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditBatchAll(ctx, req.(*QueryAllCreditBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCreditBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/CreditBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditBalance(ctx, req.(*QueryGetCreditBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditBalanceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCreditBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditBalanceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/CreditBalanceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditBalanceAll(ctx, req.(*QueryAllCreditBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetCreditDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/CreditDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditDenom(ctx, req.(*QueryGetCreditDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CreditDenomAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllCreditDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CreditDenomAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/empowerchain.empowerchain.plasticcredit.Query/CreditDenomAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CreditDenomAll(ctx, req.(*QueryAllCreditDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "empowerchain.empowerchain.plasticcredit.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "IdCounters",
			Handler:    _Query_IdCounters_Handler,
		},
		{
			MethodName: "Issuer",
			Handler:    _Query_Issuer_Handler,
		},
		{
			MethodName: "IssuerAll",
			Handler:    _Query_IssuerAll_Handler,
		},
		{
			MethodName: "CreditClass",
			Handler:    _Query_CreditClass_Handler,
		},
		{
			MethodName: "CreditClassAll",
			Handler:    _Query_CreditClassAll_Handler,
		},
		{
			MethodName: "Project",
			Handler:    _Query_Project_Handler,
		},
		{
			MethodName: "ProjectAll",
			Handler:    _Query_ProjectAll_Handler,
		},
		{
			MethodName: "Collector",
			Handler:    _Query_Collector_Handler,
		},
		{
			MethodName: "CollectorAll",
			Handler:    _Query_CollectorAll_Handler,
		},
		{
			MethodName: "CreditBatch",
			Handler:    _Query_CreditBatch_Handler,
		},
		{
			MethodName: "CreditBatchAll",
			Handler:    _Query_CreditBatchAll_Handler,
		},
		{
			MethodName: "CreditBalance",
			Handler:    _Query_CreditBalance_Handler,
		},
		{
			MethodName: "CreditBalanceAll",
			Handler:    _Query_CreditBalanceAll_Handler,
		},
		{
			MethodName: "CreditDenom",
			Handler:    _Query_CreditDenom_Handler,
		},
		{
			MethodName: "CreditDenomAll",
			Handler:    _Query_CreditDenomAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "empowerchain/plasticcredit/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetIdCountersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIdCountersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIdCountersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetIdCountersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIdCountersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIdCountersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IdCounters.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetIssuerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssuerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssuerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IssuerId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.IssuerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetIssuerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetIssuerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetIssuerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Issuer.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllIssuerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssuerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssuerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllIssuerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllIssuerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllIssuerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		for iNdEx := len(m.Issuer) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Issuer[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreditClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreditClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreditClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreditClassId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CreditClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreditClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreditClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreditClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CreditClass.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCreditClassRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreditClassRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreditClassRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCreditClassResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreditClassResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreditClassResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreditClass) > 0 {
		for iNdEx := len(m.CreditClass) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreditClass[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProjectId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Project.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProjectRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProjectRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProjectResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProjectResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Project) > 0 {
		for iNdEx := len(m.Project) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Project[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCollectorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCollectorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCollectorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CollectorId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CollectorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCollectorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCollectorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCollectorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Collector.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCollectorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCollectorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCollectorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCollectorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCollectorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCollectorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Collector) > 0 {
		for iNdEx := len(m.Collector) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Collector[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreditBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreditBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreditBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchDenom) > 0 {
		i -= len(m.BatchDenom)
		copy(dAtA[i:], m.BatchDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BatchDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreditBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreditBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreditBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CreditBatch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCreditBatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreditBatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreditBatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCreditBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreditBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreditBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreditBatch) > 0 {
		for iNdEx := len(m.CreditBatch) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreditBatch[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreditBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreditBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreditBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BatchDenom) > 0 {
		i -= len(m.BatchDenom)
		copy(dAtA[i:], m.BatchDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BatchDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreditBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreditBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreditBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CreditBalance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCreditBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreditBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreditBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BatchDenom) > 0 {
		i -= len(m.BatchDenom)
		copy(dAtA[i:], m.BatchDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BatchDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCreditBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreditBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreditBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreditBalance) > 0 {
		for iNdEx := len(m.CreditBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreditBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreditDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreditDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreditDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BatchDenom) > 0 {
		i -= len(m.BatchDenom)
		copy(dAtA[i:], m.BatchDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BatchDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetCreditDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetCreditDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetCreditDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.CreditDenom.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllCreditDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreditDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreditDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllCreditDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllCreditDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllCreditDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.CreditDenom) > 0 {
		for iNdEx := len(m.CreditDenom) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreditDenom[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetIdCountersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetIdCountersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IdCounters.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetIssuerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IssuerId != 0 {
		n += 1 + sovQuery(uint64(m.IssuerId))
	}
	return n
}

func (m *QueryGetIssuerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Issuer.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllIssuerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllIssuerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Issuer) > 0 {
		for _, e := range m.Issuer {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreditClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreditClassId != 0 {
		n += 1 + sovQuery(uint64(m.CreditClassId))
	}
	return n
}

func (m *QueryGetCreditClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CreditClass.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCreditClassRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCreditClassResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CreditClass) > 0 {
		for _, e := range m.CreditClass {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectId != 0 {
		n += 1 + sovQuery(uint64(m.ProjectId))
	}
	return n
}

func (m *QueryGetProjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Project.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProjectRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProjectResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Project) > 0 {
		for _, e := range m.Project {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCollectorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CollectorId != 0 {
		n += 1 + sovQuery(uint64(m.CollectorId))
	}
	return n
}

func (m *QueryGetCollectorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Collector.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCollectorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCollectorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Collector) > 0 {
		for _, e := range m.Collector {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreditBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BatchDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreditBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CreditBatch.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCreditBatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCreditBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CreditBatch) > 0 {
		for _, e := range m.CreditBatch {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreditBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BatchDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreditBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CreditBalance.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCreditBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BatchDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCreditBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CreditBalance) > 0 {
		for _, e := range m.CreditBalance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreditDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BatchDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetCreditDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CreditDenom.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllCreditDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllCreditDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CreditDenom) > 0 {
		for _, e := range m.CreditDenom {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIdCountersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIdCountersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIdCountersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIdCountersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIdCountersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIdCountersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdCounters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IdCounters.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssuerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssuerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssuerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerId", wireType)
			}
			m.IssuerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetIssuerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetIssuerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetIssuerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssuerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssuerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssuerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllIssuerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllIssuerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllIssuerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = append(m.Issuer, Issuer{})
			if err := m.Issuer[len(m.Issuer)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreditClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreditClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreditClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditClassId", wireType)
			}
			m.CreditClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreditClassId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreditClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreditClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreditClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreditClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreditClassRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreditClassRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreditClassRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreditClassResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreditClassResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreditClassResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditClass", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditClass = append(m.CreditClass, CreditClass{})
			if err := m.CreditClass[len(m.CreditClass)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Project.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Project", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Project = append(m.Project, Project{})
			if err := m.Project[len(m.Project)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCollectorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCollectorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCollectorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectorId", wireType)
			}
			m.CollectorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollectorId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCollectorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCollectorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCollectorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCollectorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCollectorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCollectorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCollectorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCollectorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCollectorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Collector = append(m.Collector, Collector{})
			if err := m.Collector[len(m.Collector)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreditBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreditBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreditBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreditBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreditBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreditBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreditBatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreditBatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreditBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreditBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreditBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreditBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreditBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditBatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditBatch = append(m.CreditBatch, CreditBatch{})
			if err := m.CreditBatch[len(m.CreditBatch)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreditBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreditBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreditBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreditBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreditBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreditBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreditBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreditBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreditBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreditBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreditBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreditBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreditBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditBalance = append(m.CreditBalance, CreditBalance{})
			if err := m.CreditBalance[len(m.CreditBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreditDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreditDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreditDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetCreditDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetCreditDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetCreditDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditDenom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreditDenom.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreditDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreditDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreditDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllCreditDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllCreditDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllCreditDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditDenom", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditDenom = append(m.CreditDenom, CreditDenom{})
			if err := m.CreditDenom[len(m.CreditDenom)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
