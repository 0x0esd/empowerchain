// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: empowerchain/plasticcredit/types.proto

package plasticcredit

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the module.
type Params struct {
	IssuerCreator string `protobuf:"bytes,1,opt,name=issuer_creator,json=issuerCreator,proto3" json:"issuer_creator,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetIssuerCreator() string {
	if m != nil {
		return m.IssuerCreator
	}
	return ""
}

type IDCounters struct {
	NextIssuerId      uint64 `protobuf:"varint,1,opt,name=next_issuer_id,json=nextIssuerId,proto3" json:"next_issuer_id,omitempty"`
	NextApplicantId   uint64 `protobuf:"varint,2,opt,name=next_applicant_id,json=nextApplicantId,proto3" json:"next_applicant_id,omitempty"`
	NextProjectId     uint64 `protobuf:"varint,3,opt,name=next_project_id,json=nextProjectId,proto3" json:"next_project_id,omitempty"`
	NextCreditClassId uint64 `protobuf:"varint,4,opt,name=next_credit_class_id,json=nextCreditClassId,proto3" json:"next_credit_class_id,omitempty"`
}

func (m *IDCounters) Reset()         { *m = IDCounters{} }
func (m *IDCounters) String() string { return proto.CompactTextString(m) }
func (*IDCounters) ProtoMessage()    {}
func (*IDCounters) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{1}
}
func (m *IDCounters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDCounters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDCounters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDCounters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDCounters.Merge(m, src)
}
func (m *IDCounters) XXX_Size() int {
	return m.Size()
}
func (m *IDCounters) XXX_DiscardUnknown() {
	xxx_messageInfo_IDCounters.DiscardUnknown(m)
}

var xxx_messageInfo_IDCounters proto.InternalMessageInfo

func (m *IDCounters) GetNextIssuerId() uint64 {
	if m != nil {
		return m.NextIssuerId
	}
	return 0
}

func (m *IDCounters) GetNextApplicantId() uint64 {
	if m != nil {
		return m.NextApplicantId
	}
	return 0
}

func (m *IDCounters) GetNextProjectId() uint64 {
	if m != nil {
		return m.NextProjectId
	}
	return 0
}

func (m *IDCounters) GetNextCreditClassId() uint64 {
	if m != nil {
		return m.NextCreditClassId
	}
	return 0
}

type Issuer struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Admin       string `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *Issuer) Reset()         { *m = Issuer{} }
func (m *Issuer) String() string { return proto.CompactTextString(m) }
func (*Issuer) ProtoMessage()    {}
func (*Issuer) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{2}
}
func (m *Issuer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Issuer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Issuer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Issuer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issuer.Merge(m, src)
}
func (m *Issuer) XXX_Size() int {
	return m.Size()
}
func (m *Issuer) XXX_DiscardUnknown() {
	xxx_messageInfo_Issuer.DiscardUnknown(m)
}

var xxx_messageInfo_Issuer proto.InternalMessageInfo

func (m *Issuer) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Issuer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Issuer) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Issuer) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

type Applicant struct {
	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Admin       string `protobuf:"bytes,4,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (m *Applicant) Reset()         { *m = Applicant{} }
func (m *Applicant) String() string { return proto.CompactTextString(m) }
func (*Applicant) ProtoMessage()    {}
func (*Applicant) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{3}
}
func (m *Applicant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Applicant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Applicant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Applicant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Applicant.Merge(m, src)
}
func (m *Applicant) XXX_Size() int {
	return m.Size()
}
func (m *Applicant) XXX_DiscardUnknown() {
	xxx_messageInfo_Applicant.DiscardUnknown(m)
}

var xxx_messageInfo_Applicant proto.InternalMessageInfo

func (m *Applicant) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Applicant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Applicant) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Applicant) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

type Project struct {
	ProjectId     uint64      `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CreditClassId uint64      `protobuf:"varint,2,opt,name=credit_class_id,json=creditClassId,proto3" json:"credit_class_id,omitempty"`
	ApplicantId   uint64      `protobuf:"varint,3,opt,name=applicant_id,json=applicantId,proto3" json:"applicant_id,omitempty"`
	Name          string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	ProjectData   *ProvenData `protobuf:"bytes,5,opt,name=project_data,json=projectData,proto3" json:"project_data,omitempty"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{4}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *Project) GetCreditClassId() uint64 {
	if m != nil {
		return m.CreditClassId
	}
	return 0
}

func (m *Project) GetApplicantId() uint64 {
	if m != nil {
		return m.ApplicantId
	}
	return 0
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetProjectData() *ProvenData {
	if m != nil {
		return m.ProjectData
	}
	return nil
}

type CreditClass struct {
	CreditClassId   uint64      `protobuf:"varint,1,opt,name=credit_class_id,json=creditClassId,proto3" json:"credit_class_id,omitempty"`
	IssuerId        uint64      `protobuf:"varint,2,opt,name=issuer_id,json=issuerId,proto3" json:"issuer_id,omitempty"`
	Denom           string      `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	CreditClassData *ProvenData `protobuf:"bytes,4,opt,name=credit_class_data,json=creditClassData,proto3" json:"credit_class_data,omitempty"`
}

func (m *CreditClass) Reset()         { *m = CreditClass{} }
func (m *CreditClass) String() string { return proto.CompactTextString(m) }
func (*CreditClass) ProtoMessage()    {}
func (*CreditClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{5}
}
func (m *CreditClass) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreditClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreditClass.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreditClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditClass.Merge(m, src)
}
func (m *CreditClass) XXX_Size() int {
	return m.Size()
}
func (m *CreditClass) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditClass.DiscardUnknown(m)
}

var xxx_messageInfo_CreditClass proto.InternalMessageInfo

func (m *CreditClass) GetCreditClassId() uint64 {
	if m != nil {
		return m.CreditClassId
	}
	return 0
}

func (m *CreditClass) GetIssuerId() uint64 {
	if m != nil {
		return m.IssuerId
	}
	return 0
}

func (m *CreditClass) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *CreditClass) GetCreditClassData() *ProvenData {
	if m != nil {
		return m.CreditClassData
	}
	return nil
}

type CreditCollection struct {
	ProjectId   uint64         `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	TotalAmount *CreditBalance `protobuf:"bytes,3,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	CreditData  []*ProvenData  `protobuf:"bytes,4,rep,name=credit_data,json=creditData,proto3" json:"credit_data,omitempty"`
}

func (m *CreditCollection) Reset()         { *m = CreditCollection{} }
func (m *CreditCollection) String() string { return proto.CompactTextString(m) }
func (*CreditCollection) ProtoMessage()    {}
func (*CreditCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{6}
}
func (m *CreditCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreditCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreditCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreditCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditCollection.Merge(m, src)
}
func (m *CreditCollection) XXX_Size() int {
	return m.Size()
}
func (m *CreditCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditCollection.DiscardUnknown(m)
}

var xxx_messageInfo_CreditCollection proto.InternalMessageInfo

func (m *CreditCollection) GetProjectId() uint64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *CreditCollection) GetTotalAmount() *CreditBalance {
	if m != nil {
		return m.TotalAmount
	}
	return nil
}

func (m *CreditCollection) GetCreditData() []*ProvenData {
	if m != nil {
		return m.CreditData
	}
	return nil
}

type IDCreditCollection struct {
	Denom            string            `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	CreditCollection *CreditCollection `protobuf:"bytes,2,opt,name=credit_collection,json=creditCollection,proto3" json:"credit_collection,omitempty"`
}

func (m *IDCreditCollection) Reset()         { *m = IDCreditCollection{} }
func (m *IDCreditCollection) String() string { return proto.CompactTextString(m) }
func (*IDCreditCollection) ProtoMessage()    {}
func (*IDCreditCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{7}
}
func (m *IDCreditCollection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDCreditCollection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDCreditCollection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDCreditCollection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDCreditCollection.Merge(m, src)
}
func (m *IDCreditCollection) XXX_Size() int {
	return m.Size()
}
func (m *IDCreditCollection) XXX_DiscardUnknown() {
	xxx_messageInfo_IDCreditCollection.DiscardUnknown(m)
}

var xxx_messageInfo_IDCreditCollection proto.InternalMessageInfo

func (m *IDCreditCollection) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *IDCreditCollection) GetCreditCollection() *CreditCollection {
	if m != nil {
		return m.CreditCollection
	}
	return nil
}

type IDCreditBalance struct {
	Owner         string         `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Denom         string         `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	CreditBalance *CreditBalance `protobuf:"bytes,3,opt,name=credit_balance,json=creditBalance,proto3" json:"credit_balance,omitempty"`
}

func (m *IDCreditBalance) Reset()         { *m = IDCreditBalance{} }
func (m *IDCreditBalance) String() string { return proto.CompactTextString(m) }
func (*IDCreditBalance) ProtoMessage()    {}
func (*IDCreditBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{8}
}
func (m *IDCreditBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IDCreditBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IDCreditBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IDCreditBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IDCreditBalance.Merge(m, src)
}
func (m *IDCreditBalance) XXX_Size() int {
	return m.Size()
}
func (m *IDCreditBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_IDCreditBalance.DiscardUnknown(m)
}

var xxx_messageInfo_IDCreditBalance proto.InternalMessageInfo

func (m *IDCreditBalance) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *IDCreditBalance) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *IDCreditBalance) GetCreditBalance() *CreditBalance {
	if m != nil {
		return m.CreditBalance
	}
	return nil
}

type ProvenData struct {
	Uri  string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Hash string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *ProvenData) Reset()         { *m = ProvenData{} }
func (m *ProvenData) String() string { return proto.CompactTextString(m) }
func (*ProvenData) ProtoMessage()    {}
func (*ProvenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{9}
}
func (m *ProvenData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProvenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProvenData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProvenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProvenData.Merge(m, src)
}
func (m *ProvenData) XXX_Size() int {
	return m.Size()
}
func (m *ProvenData) XXX_DiscardUnknown() {
	xxx_messageInfo_ProvenData.DiscardUnknown(m)
}

var xxx_messageInfo_ProvenData proto.InternalMessageInfo

func (m *ProvenData) GetUri() string {
	if m != nil {
		return m.Uri
	}
	return ""
}

func (m *ProvenData) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type CreditBalance struct {
	Active  uint64 `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	Retired uint64 `protobuf:"varint,2,opt,name=retired,proto3" json:"retired,omitempty"`
}

func (m *CreditBalance) Reset()         { *m = CreditBalance{} }
func (m *CreditBalance) String() string { return proto.CompactTextString(m) }
func (*CreditBalance) ProtoMessage()    {}
func (*CreditBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_697986914fd4dd11, []int{10}
}
func (m *CreditBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreditBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreditBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreditBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditBalance.Merge(m, src)
}
func (m *CreditBalance) XXX_Size() int {
	return m.Size()
}
func (m *CreditBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditBalance.DiscardUnknown(m)
}

var xxx_messageInfo_CreditBalance proto.InternalMessageInfo

func (m *CreditBalance) GetActive() uint64 {
	if m != nil {
		return m.Active
	}
	return 0
}

func (m *CreditBalance) GetRetired() uint64 {
	if m != nil {
		return m.Retired
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "empowerchain.plasticcredit.Params")
	proto.RegisterType((*IDCounters)(nil), "empowerchain.plasticcredit.IDCounters")
	proto.RegisterType((*Issuer)(nil), "empowerchain.plasticcredit.Issuer")
	proto.RegisterType((*Applicant)(nil), "empowerchain.plasticcredit.Applicant")
	proto.RegisterType((*Project)(nil), "empowerchain.plasticcredit.Project")
	proto.RegisterType((*CreditClass)(nil), "empowerchain.plasticcredit.CreditClass")
	proto.RegisterType((*CreditCollection)(nil), "empowerchain.plasticcredit.CreditCollection")
	proto.RegisterType((*IDCreditCollection)(nil), "empowerchain.plasticcredit.IDCreditCollection")
	proto.RegisterType((*IDCreditBalance)(nil), "empowerchain.plasticcredit.IDCreditBalance")
	proto.RegisterType((*ProvenData)(nil), "empowerchain.plasticcredit.ProvenData")
	proto.RegisterType((*CreditBalance)(nil), "empowerchain.plasticcredit.CreditBalance")
}

func init() {
	proto.RegisterFile("empowerchain/plasticcredit/types.proto", fileDescriptor_697986914fd4dd11)
}

var fileDescriptor_697986914fd4dd11 = []byte{
	// 733 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0x6e, 0xba, 0xae, 0xa3, 0x2f, 0xfd, 0xb1, 0x59, 0x15, 0x2a, 0x43, 0x74, 0x23, 0x42, 0xd5,
	0x40, 0xd0, 0x4a, 0x85, 0x13, 0x17, 0xd4, 0x75, 0x12, 0x8a, 0x84, 0xa0, 0x0a, 0x27, 0xb8, 0x54,
	0x6e, 0x62, 0x5a, 0xa3, 0x24, 0x8e, 0x1c, 0x77, 0x1b, 0x17, 0x24, 0x0e, 0x9c, 0xe1, 0xc8, 0x91,
	0x3f, 0x02, 0x89, 0x0b, 0x7f, 0xc0, 0x8e, 0xd3, 0x4e, 0x1c, 0xd1, 0xf6, 0x8f, 0xa0, 0xd8, 0x4e,
	0x9b, 0x8c, 0x31, 0xb4, 0x13, 0x37, 0xbf, 0xe7, 0xcf, 0xcf, 0xdf, 0xf7, 0xbd, 0x67, 0x19, 0x3a,
	0x24, 0x88, 0xd8, 0x01, 0xe1, 0xee, 0x0c, 0xd3, 0xb0, 0x17, 0xf9, 0x38, 0x16, 0xd4, 0x75, 0x39,
	0xf1, 0xa8, 0xe8, 0x89, 0x77, 0x11, 0x89, 0xbb, 0x11, 0x67, 0x82, 0xa1, 0xcd, 0x2c, 0xae, 0x9b,
	0xc3, 0x6d, 0x36, 0xa7, 0x6c, 0xca, 0x24, 0xac, 0x97, 0xac, 0xd4, 0x89, 0xcd, 0x1b, 0x2e, 0x8b,
	0x03, 0x16, 0x8f, 0xd5, 0x86, 0x0a, 0xf4, 0xd6, 0xd6, 0x94, 0xb1, 0xa9, 0x4f, 0x7a, 0x32, 0x9a,
	0xcc, 0xdf, 0xf4, 0x04, 0x0d, 0x48, 0x2c, 0x70, 0x10, 0x29, 0x80, 0xf5, 0x02, 0xca, 0x23, 0xcc,
	0x71, 0x10, 0xa3, 0x27, 0x50, 0xa7, 0x71, 0x3c, 0x27, 0x7c, 0xec, 0x72, 0x82, 0x05, 0xe3, 0x2d,
	0x63, 0xdb, 0xd8, 0xa9, 0xec, 0xb6, 0x4e, 0xbe, 0x3d, 0x68, 0xea, 0xa2, 0x03, 0xcf, 0xe3, 0x24,
	0x8e, 0x5f, 0x0a, 0x4e, 0xc3, 0xa9, 0x53, 0x53, 0xf8, 0xa1, 0x82, 0x3f, 0x2e, 0x7d, 0xf9, 0xba,
	0x55, 0xb0, 0xbe, 0x1b, 0x00, 0xf6, 0xde, 0x90, 0xcd, 0x43, 0x41, 0x78, 0x8c, 0xee, 0x40, 0x3d,
	0x24, 0x87, 0x62, 0xac, 0x4b, 0x53, 0x4f, 0x56, 0x2d, 0x39, 0xd5, 0x24, 0x6b, 0xcb, 0xa4, 0xed,
	0xa1, 0x7b, 0xb0, 0x21, 0x51, 0x38, 0x8a, 0x7c, 0xea, 0xe2, 0x50, 0x24, 0xc0, 0xa2, 0x04, 0x36,
	0x92, 0x8d, 0x41, 0x9a, 0xb7, 0x3d, 0xd4, 0x01, 0x99, 0x4a, 0xd4, 0xbe, 0x25, 0xae, 0x44, 0xae,
	0x48, 0x64, 0x2d, 0x49, 0x8f, 0x54, 0xd6, 0xf6, 0x50, 0x0f, 0x9a, 0x12, 0xa7, 0xac, 0x1b, 0xbb,
	0x3e, 0x8e, 0xe3, 0x04, 0x5c, 0x92, 0x60, 0x79, 0xdf, 0x50, 0x6e, 0x0d, 0x93, 0x1d, 0xdb, 0xb3,
	0xde, 0x43, 0x59, 0x11, 0x42, 0x75, 0x28, 0x2e, 0x88, 0x16, 0xa9, 0x87, 0x10, 0x94, 0x42, 0x1c,
	0x10, 0xc9, 0xa8, 0xe2, 0xc8, 0x35, 0xda, 0x06, 0xd3, 0x23, 0xb1, 0xcb, 0x69, 0x24, 0x28, 0x0b,
	0x25, 0x85, 0x8a, 0x93, 0x4d, 0xa1, 0x2e, 0xac, 0x62, 0x2f, 0xa0, 0xa1, 0xbc, 0xf1, 0x32, 0x1f,
	0x15, 0xcc, 0xfa, 0x60, 0x40, 0x65, 0x21, 0xf4, 0x3f, 0x71, 0x38, 0x31, 0x60, 0x4d, 0x5b, 0x88,
	0x6e, 0x01, 0x64, 0x3c, 0x56, 0x4c, 0x2a, 0xd1, 0xc2, 0xdf, 0x0e, 0x34, 0xce, 0x5b, 0xab, 0x3a,
	0x56, 0x73, 0xb3, 0xb6, 0xa2, 0xdb, 0x50, 0xcd, 0xb5, 0x55, 0x35, 0xcb, 0xc4, 0x99, 0x96, 0xa6,
	0xda, 0x4a, 0x19, 0x6d, 0x36, 0x54, 0xd3, 0xdb, 0x3d, 0x2c, 0x70, 0x6b, 0x75, 0xdb, 0xd8, 0x31,
	0xfb, 0x9d, 0xee, 0xdf, 0x5f, 0x47, 0x77, 0xc4, 0xd9, 0x3e, 0x09, 0xf7, 0xb0, 0xc0, 0x8e, 0xa9,
	0xcf, 0x26, 0x81, 0xf5, 0xc3, 0x00, 0x33, 0xd3, 0xea, 0x8b, 0x98, 0x1b, 0x17, 0x31, 0xbf, 0x09,
	0x95, 0xe5, 0xd8, 0x2a, 0x6d, 0xd7, 0x68, 0x3a, 0xb2, 0x4d, 0x58, 0xf5, 0x48, 0xc8, 0x02, 0xed,
	0xba, 0x0a, 0x90, 0x03, 0x1b, 0xb9, 0xd2, 0x92, 0x7a, 0xe9, 0x4a, 0xd4, 0x1b, 0x19, 0x12, 0x92,
	0xfe, 0x91, 0x01, 0xeb, 0x9a, 0x3e, 0xf3, 0x7d, 0xe2, 0xca, 0xc6, 0xe6, 0x9b, 0x53, 0x3c, 0xdf,
	0x9c, 0x67, 0x50, 0x15, 0x4c, 0x60, 0x7f, 0x8c, 0x83, 0xe4, 0x25, 0x4a, 0x92, 0x66, 0xff, 0xee,
	0x65, 0x14, 0xd4, 0x15, 0xbb, 0xd8, 0xc7, 0xa1, 0x4b, 0x1c, 0x53, 0x1e, 0x1f, 0xc8, 0xd3, 0xe8,
	0x29, 0x98, 0x5a, 0x95, 0xd6, 0xb3, 0x72, 0x05, 0x3d, 0xa0, 0x52, 0x52, 0xca, 0x47, 0x03, 0x90,
	0xbd, 0xf7, 0x87, 0x98, 0x85, 0x97, 0x46, 0xd6, 0xcb, 0x57, 0x4b, 0x2f, 0x17, 0x50, 0xa9, 0xd4,
	0xec, 0xdf, 0xff, 0xb7, 0x90, 0x65, 0x79, 0x67, 0xdd, 0x3d, 0x97, 0xb1, 0x3e, 0x19, 0xd0, 0x48,
	0x79, 0x68, 0xc5, 0x09, 0x09, 0x76, 0x10, 0x12, 0x9e, 0x92, 0x90, 0xc1, 0x92, 0x5a, 0x31, 0x4b,
	0x6d, 0x04, 0x75, 0x4d, 0x6d, 0xa2, 0x4e, 0x5f, 0xdd, 0x60, 0x3d, 0x6b, 0x3a, 0xb4, 0xfa, 0x00,
	0x4b, 0xcf, 0xd0, 0x3a, 0xac, 0xcc, 0x39, 0xd5, 0x4c, 0x92, 0x65, 0xf2, 0x44, 0x66, 0x38, 0x9e,
	0xa5, 0xcf, 0x3f, 0x59, 0x5b, 0x03, 0xa8, 0xe5, 0x25, 0x5c, 0x87, 0x32, 0x76, 0x05, 0xdd, 0x27,
	0x7a, 0x9e, 0x75, 0x84, 0x5a, 0xb0, 0xc6, 0x89, 0xa0, 0x9c, 0xa4, 0x93, 0x92, 0x86, 0xbb, 0xcf,
	0x8f, 0x4e, 0xdb, 0xc6, 0xf1, 0x69, 0xdb, 0xf8, 0x75, 0xda, 0x36, 0x3e, 0x9f, 0xb5, 0x0b, 0xc7,
	0x67, 0xed, 0xc2, 0xcf, 0xb3, 0x76, 0xe1, 0xf5, 0xa3, 0x29, 0x15, 0xb3, 0xf9, 0xa4, 0xeb, 0xb2,
	0xa0, 0x97, 0xfb, 0xb9, 0x72, 0xc1, 0x61, 0xfe, 0x23, 0x9b, 0x94, 0xe5, 0xaf, 0xf2, 0xf0, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x21, 0x2f, 0x52, 0x21, 0xed, 0x06, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IssuerCreator) > 0 {
		i -= len(m.IssuerCreator)
		copy(dAtA[i:], m.IssuerCreator)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.IssuerCreator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IDCounters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDCounters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDCounters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextCreditClassId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NextCreditClassId))
		i--
		dAtA[i] = 0x20
	}
	if m.NextProjectId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NextProjectId))
		i--
		dAtA[i] = 0x18
	}
	if m.NextApplicantId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NextApplicantId))
		i--
		dAtA[i] = 0x10
	}
	if m.NextIssuerId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.NextIssuerId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Issuer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Issuer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Issuer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Applicant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Applicant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Applicant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProjectData != nil {
		{
			size, err := m.ProjectData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.ApplicantId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ApplicantId))
		i--
		dAtA[i] = 0x18
	}
	if m.CreditClassId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CreditClassId))
		i--
		dAtA[i] = 0x10
	}
	if m.ProjectId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreditClass) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreditClass) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreditClass) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreditClassData != nil {
		{
			size, err := m.CreditClassData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IssuerId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.IssuerId))
		i--
		dAtA[i] = 0x10
	}
	if m.CreditClassId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CreditClassId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreditCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreditCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreditCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreditData) > 0 {
		for iNdEx := len(m.CreditData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CreditData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TotalAmount != nil {
		{
			size, err := m.TotalAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ProjectId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.ProjectId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *IDCreditCollection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDCreditCollection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDCreditCollection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreditCollection != nil {
		{
			size, err := m.CreditCollection.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *IDCreditBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IDCreditBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IDCreditBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreditBalance != nil {
		{
			size, err := m.CreditBalance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProvenData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProvenData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProvenData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uri) > 0 {
		i -= len(m.Uri)
		copy(dAtA[i:], m.Uri)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Uri)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreditBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreditBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreditBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Retired != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Retired))
		i--
		dAtA[i] = 0x10
	}
	if m.Active != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Active))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerCreator)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IDCounters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextIssuerId != 0 {
		n += 1 + sovTypes(uint64(m.NextIssuerId))
	}
	if m.NextApplicantId != 0 {
		n += 1 + sovTypes(uint64(m.NextApplicantId))
	}
	if m.NextProjectId != 0 {
		n += 1 + sovTypes(uint64(m.NextProjectId))
	}
	if m.NextCreditClassId != 0 {
		n += 1 + sovTypes(uint64(m.NextCreditClassId))
	}
	return n
}

func (m *Issuer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Applicant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectId != 0 {
		n += 1 + sovTypes(uint64(m.ProjectId))
	}
	if m.CreditClassId != 0 {
		n += 1 + sovTypes(uint64(m.CreditClassId))
	}
	if m.ApplicantId != 0 {
		n += 1 + sovTypes(uint64(m.ApplicantId))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ProjectData != nil {
		l = m.ProjectData.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreditClass) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreditClassId != 0 {
		n += 1 + sovTypes(uint64(m.CreditClassId))
	}
	if m.IssuerId != 0 {
		n += 1 + sovTypes(uint64(m.IssuerId))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreditClassData != nil {
		l = m.CreditClassData.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreditCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProjectId != 0 {
		n += 1 + sovTypes(uint64(m.ProjectId))
	}
	if m.TotalAmount != nil {
		l = m.TotalAmount.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if len(m.CreditData) > 0 {
		for _, e := range m.CreditData {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	return n
}

func (m *IDCreditCollection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreditCollection != nil {
		l = m.CreditCollection.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *IDCreditBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.CreditBalance != nil {
		l = m.CreditBalance.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ProvenData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uri)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CreditBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Active != 0 {
		n += 1 + sovTypes(uint64(m.Active))
	}
	if m.Retired != 0 {
		n += 1 + sovTypes(uint64(m.Retired))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerCreator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerCreator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDCounters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDCounters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDCounters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextIssuerId", wireType)
			}
			m.NextIssuerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextIssuerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextApplicantId", wireType)
			}
			m.NextApplicantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextApplicantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextProjectId", wireType)
			}
			m.NextProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextCreditClassId", wireType)
			}
			m.NextCreditClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextCreditClassId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Issuer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Issuer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Issuer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Applicant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Applicant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Applicant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditClassId", wireType)
			}
			m.CreditClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreditClassId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicantId", wireType)
			}
			m.ApplicantId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplicantId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProjectData == nil {
				m.ProjectData = &ProvenData{}
			}
			if err := m.ProjectData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreditClass) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditClass: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditClass: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditClassId", wireType)
			}
			m.CreditClassId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreditClassId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerId", wireType)
			}
			m.IssuerId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IssuerId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditClassData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreditClassData == nil {
				m.CreditClassData = &ProvenData{}
			}
			if err := m.CreditClassData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreditCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectId", wireType)
			}
			m.ProjectId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalAmount == nil {
				m.TotalAmount = &CreditBalance{}
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreditData = append(m.CreditData, &ProvenData{})
			if err := m.CreditData[len(m.CreditData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDCreditCollection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDCreditCollection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDCreditCollection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditCollection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreditCollection == nil {
				m.CreditCollection = &CreditCollection{}
			}
			if err := m.CreditCollection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IDCreditBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IDCreditBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IDCreditBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreditBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreditBalance == nil {
				m.CreditBalance = &CreditBalance{}
			}
			if err := m.CreditBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProvenData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProvenData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProvenData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreditBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreditBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreditBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			m.Active = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Active |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Retired", wireType)
			}
			m.Retired = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Retired |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
